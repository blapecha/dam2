{\rtf1\fbidis\ansi\ansicpg1252\deff0\nouicompat\deflang3082{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green0\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang10\par
\par
Blanca P\'e9rez Chavarria\par
\par
PROGRAMACI\'d3N M\'daLTIMEDIA\par
\par
Resultados de aprendizaje y criterios de evaluaci\'f3n.\par
1. Selecciona y prueba motores de juegos analizando la arquitectura de juegos 2D y 3D.\par
\par
Criterios de evaluaci\'f3n:\par
\par
\b\fs28 a) Se han identificado los elementos que componen la arquitectura de un juego 2D y 3D. - En el caso de un juego 2D me ten\'e9is que justificar que entendeis conceptos como el canvas, pegar imagen, desplazarnos en x e y - En el caso de un juego 3D, hemos trabajado con Threejs, ten\'e9is que demostrar que hab\'e9is entendido lo que es una escena, una malla, un objeto 3d, una luz, y en definitiva todos los elementos que hemos tocado en clase\par
\b0\fs22\par
Caracter\'edsticas de un Juego en 2D\par
Un juego en dos dimensiones (2D) se caracteriza principalmente por su representaci\'f3n gr\'e1fica y las mec\'e1nicas de juego, que se desarrollan en un plano bidimensional (alto y ancho). A continuaci\'f3n, se destacan las principales caracter\'edsticas de los juegos 2D:\par
\par
Plano Bidimensional:\par
\par
Los juegos 2D se limitan a dos ejes: horizontal (x) y vertical (y). No hay profundidad, como en los juegos 3D.\par
Los personajes y objetos se mueven a lo largo de estos dos ejes, lo que simplifica las mec\'e1nicas de movimiento.\par
Sprites:\par
\par
Los gr\'e1ficos en 2D suelen estar compuestos por sprites, que son im\'e1genes o conjuntos de im\'e1genes que representan personajes, objetos y fondos.\par
Los sprites pueden ser est\'e1ticos o animados (con m\'faltiples fotogramas que dan la ilusi\'f3n de movimiento).\par
Entorno:\par
\par
El fondo o escenario de un juego 2D puede ser una imagen est\'e1tica o desplazarse (scrolling), lo que a\'f1ade dinamismo a la jugabilidad.\par
En algunos juegos, el entorno interact\'faa con el personaje, como plataformas que se pueden mover o romper.\par
C\'e1mara Fija o Desplazable:\par
\par
La c\'e1mara puede estar fija en un \'e1rea determinada o desplazarse horizontal o verticalmente seg\'fan el movimiento del personaje.\par
El scrolling es com\'fan en juegos de plataformas, donde el fondo se desplaza conforme el jugador avanza.\par
Mec\'e1nicas Simples:\par
\par
Los juegos 2D suelen tener mec\'e1nicas m\'e1s simples en comparaci\'f3n con los juegos 3D, lo que los hace m\'e1s accesibles.\par
El control de los personajes se reduce a moverse en las direcciones izquierda/derecha o arriba/abajo, as\'ed como realizar acciones b\'e1sicas como saltar o atacar.\par
Colisiones y F\'edsica Simplificada:\par
\par
Las colisiones entre personajes y objetos se manejan en dos dimensiones, lo que simplifica el c\'e1lculo de interacciones.\par
La f\'edsica en juegos 2D es menos compleja, enfoc\'e1ndose en elementos como la gravedad, el salto o el deslizamiento.\par
Estilo Art\'edstico:\par
\par
Los gr\'e1ficos de los juegos 2D pueden ir desde p\'edxeles (pixel art) hasta ilustraciones detalladas o vectoriales, lo que les da una gran flexibilidad visual.\par
Algunos juegos 2D imitan un estilo retro, mientras que otros pueden tener gr\'e1ficos muy modernos y estilizados.\par
Elementos de un Juego en 2D\par
Personajes (Sprites):\par
\par
Los personajes del juego se representan mediante sprites, que son im\'e1genes bidimensionales. Estos personajes pueden tener diferentes animaciones seg\'fan sus acciones (caminar, saltar, atacar, etc.).\par
Objetos y Elementos del Escenario:\par
\par
Los objetos interactuables del juego tambi\'e9n se representan mediante sprites, como plataformas, obst\'e1culos, enemigos, monedas, etc.\par
Estos objetos pueden moverse o cambiar dependiendo de la interacci\'f3n del jugador.\par
Fondo o Escenario:\par
\par
El escenario puede ser un fondo est\'e1tico o en movimiento (scrolling). Este entorno ayuda a establecer el ambiente del juego.\par
En algunos juegos, el escenario tambi\'e9n puede tener varias capas de fondo para dar la ilusi\'f3n de profundidad (parallax scrolling).\par
Interfaz de Usuario (HUD):\par
\par
Los juegos 2D incluyen una HUD (Head-Up Display) que muestra informaci\'f3n importante para el jugador, como la salud, puntuaci\'f3n, tiempo, n\'famero de vidas, o inventario.\par
Estos elementos suelen estar en los bordes de la pantalla para no interferir con la acci\'f3n principal.\par
Controles Simples:\par
\par
Los controles en juegos 2D suelen ser sencillos, generalmente limitados a mover al personaje a la izquierda, derecha, arriba o abajo, y realizar acciones como saltar, disparar o atacar.\par
M\'fasica y Efectos de Sonido:\par
\par
La m\'fasica de fondo y los efectos sonoros acompa\'f1an la experiencia del juego, a\'f1adiendo inmersi\'f3n.\par
Los efectos de sonido tambi\'e9n son claves para indicar acciones o eventos importantes en el juego (por ejemplo, recoger una moneda o recibir da\'f1o).\par
Niveles:\par
\par
Los juegos en 2D suelen estar organizados en niveles o etapas, que el jugador debe superar progresivamente.\par
Cada nivel puede tener diferentes dise\'f1os, desaf\'edos y enemigos, con una dificultad creciente.\par
Colisiones y F\'edsica:\par
\par
La detecci\'f3n de colisiones entre el personaje y los objetos o enemigos es esencial en juegos 2D. Determina, por ejemplo, si un personaje aterriza en una plataforma o choca contra un obst\'e1culo.\par
La f\'edsica tambi\'e9n incluye aspectos como el salto y la gravedad, que afectan c\'f3mo los personajes se mueven en el entorno.\par
Ejemplos de Juegos 2D\par
Algunos g\'e9neros de juegos 2D populares son:\par
\par
Plataformas: Donde el jugador salta entre plataformas y evita obst\'e1culos. Ejemplo: Super Mario Bros.\par
Peleas: Juegos donde dos o m\'e1s personajes se enfrentan en un espacio limitado. Ejemplo: Street Fighter.\par
Shoot'em up: Donde el jugador controla una nave u objeto que dispara a los enemigos. Ejemplo: Space Invaders.\par
En resumen, los juegos 2D se centran en una experiencia visual y de control simple, aprovechando un entorno bidimensional para ofrecer jugabilidad r\'e1pida y accesible, lo que los hace populares en una amplia variedad de dispositivos y plataformas.\par
\par
Caracter\'edsticas de un Juego en 3D\par
Los juegos en tres dimensiones (3D) se caracterizan por tener profundidad, lo que permite a los jugadores moverse y experimentar el entorno en un espacio tridimensional. A continuaci\'f3n, se describen las principales caracter\'edsticas de los juegos 3D:\par
\par
Espacio Tridimensional:\par
\par
Los juegos 3D se desarrollan en un espacio con tres ejes: horizontal (x), vertical (y) y profundidad (z), lo que permite un mayor grado de libertad en el movimiento y las interacciones.\par
Los personajes pueden moverse hacia adelante y hacia atr\'e1s, adem\'e1s de las direcciones cl\'e1sicas de los juegos 2D.\par
Modelos 3D:\par
\par
Los gr\'e1ficos en 3D se construyen a partir de modelos 3D, que son representaciones tridimensionales de personajes, objetos y escenarios.\par
Los modelos est\'e1n compuestos por pol\'edgonos y tienen texturas aplicadas para darles detalles visuales como piel, ropa o superficies realistas.\par
C\'e1mara en Tercera o Primera Persona:\par
\par
En los juegos 3D, la c\'e1mara juega un papel crucial. Puede estar detr\'e1s del personaje (tercera persona), sobre su hombro o dentro del personaje (primera persona), lo que ofrece una visi\'f3n inmersiva del entorno.\par
La c\'e1mara es din\'e1mica y se ajusta a los movimientos del jugador o la acci\'f3n del juego.\par
Colisiones y F\'edsica Realista:\par
\par
Los juegos 3D suelen tener motores de f\'edsica avanzados que simulan colisiones, gravedad, interacci\'f3n con objetos y movimientos realistas.\par
Las colisiones no solo ocurren en dos ejes, sino tambi\'e9n en el eje z, lo que aumenta la complejidad de la detecci\'f3n de colisiones.\par
Mundo Abierto o Escenarios:\par
\par
Los juegos 3D a menudo presentan mundos abiertos o grandes entornos en los que el jugador puede moverse libremente. Sin embargo, tambi\'e9n pueden tener niveles o escenarios m\'e1s cerrados.\par
En mundos abiertos, el jugador explora el entorno desde cualquier direcci\'f3n, a menudo con la posibilidad de interactuar con diversos objetos y personajes.\par
Sistemas de Iluminaci\'f3n y Sombras:\par
\par
En los juegos 3D, la iluminaci\'f3n es esencial para crear un entorno realista. Los objetos reaccionan a la luz, creando sombras din\'e1micas que cambian seg\'fan la fuente de luz y la hora del d\'eda.\par
Las t\'e9cnicas como la iluminaci\'f3n global, el mapeo de sombras y el mapeo de luces mejoran la atm\'f3sfera y el realismo del juego.\par
Animaci\'f3n Esquel\'e9tica:\par
\par
En los modelos 3D, los personajes suelen estar animados mediante rigging o esqueletos, que son sistemas de huesos virtuales que controlan los movimientos.\par
Esto permite una mayor flexibilidad en las animaciones y movimientos fluidos y realistas.\par
Mayor Interacci\'f3n con el Entorno:\par
\par
En los juegos 3D, el jugador puede interactuar con objetos de maneras m\'e1s complejas, como abrir puertas, recoger objetos, destruir elementos del entorno, etc.\par
Tambi\'e9n es com\'fan encontrar f\'edsica de destrucci\'f3n, donde los objetos reaccionan de manera realista a los impactos.\par
Elementos de un Juego en 3D\par
Personajes y Modelos 3D:\par
\par
Los personajes, objetos y enemigos se representan mediante modelos 3D creados a partir de pol\'edgonos. Estos modelos est\'e1n texturizados y animados para darles vida y dinamismo.\par
Los personajes pueden tener animaciones para caminar, correr, saltar, atacar, etc., y suelen reaccionar de manera realista a las interacciones del entorno.\par
Entorno y Escenarios 3D:\par
\par
El entorno en un juego 3D es tridimensional, lo que permite a los jugadores moverse y explorar en todas las direcciones.\par
Los escenarios pueden ser lineales (el jugador sigue un camino predefinido) o no lineales, donde el jugador puede explorar libremente un mundo abierto.\par
Colisiones y F\'edsica Compleja:\par
\par
La detecci\'f3n de colisiones es m\'e1s compleja que en los juegos 2D, ya que debe manejar las interacciones en los tres ejes (x, y y z).\par
El motor de f\'edsica puede incluir efectos como la gravedad, el rebote, el deslizamiento, y las simulaciones realistas de movimiento.\par
Iluminaci\'f3n y Sombreado:\par
\par
Los sistemas de iluminaci\'f3n en juegos 3D son avanzados, con luces din\'e1micas que crean sombras y reflejos realistas en los objetos.\par
Tambi\'e9n se utilizan t\'e9cnicas de sombras proyectadas, oclusi\'f3n ambiental y reflejos para dar mayor realismo al mundo del juego.\par
Interfaz de Usuario (HUD):\par
\par
Similar a los juegos 2D, el HUD proporciona informaci\'f3n esencial para el jugador, como la salud, la munici\'f3n, el mapa, o los puntos de experiencia.\par
En algunos juegos 3D, el HUD puede adaptarse a la perspectiva del jugador, integr\'e1ndose m\'e1s en el entorno.\par
Control de la C\'e1mara:\par
\par
La c\'e1mara es un elemento clave en los juegos 3D, y puede ser fija (como en algunos juegos de plataformas) o din\'e1mica (siguiendo al personaje o permitiendo al jugador controlar el \'e1ngulo de visi\'f3n).\par
La c\'e1mara ajusta su perspectiva para mejorar la visibilidad del entorno y la jugabilidad.\par
Sistemas de Navegaci\'f3n y Rutas:\par
\par
En los juegos 3D, especialmente los de mundo abierto, es importante contar con sistemas de navegaci\'f3n que ayuden al jugador a orientarse, como minimapas o br\'fajulas en pantalla.\par
Tambi\'e9n se pueden incluir sistemas de autogu\'eda que dirigen al jugador hacia sus objetivos.\par
Multijugador y Conectividad:\par
\par
Muchos juegos 3D incluyen modos multijugador en l\'ednea, donde los jugadores pueden interactuar entre s\'ed en un espacio 3D compartido.\par
Esto requiere de servidores y tecnolog\'eda de red para sincronizar los movimientos y acciones de los jugadores.\par
Ejemplos de Juegos 3D\par
Mundo Abierto: The Legend of Zelda: Breath of the Wild, donde los jugadores pueden explorar libremente un vasto mundo 3D lleno de desaf\'edos.\par
Primera Persona (FPS): Call of Duty, donde los jugadores experimentan el juego desde la perspectiva del personaje.\par
Tercera Persona: Grand Theft Auto V, en el que la c\'e1mara sigue al personaje desde atr\'e1s mientras interact\'faa con el entorno.\par
Conclusi\'f3n\par
Los juegos 3D ofrecen una experiencia m\'e1s inmersiva y compleja que los juegos 2D debido a su representaci\'f3n tridimensional y mayor interactividad con el entorno. Desde modelos 3D y sistemas de f\'edsica avanzados, hasta una c\'e1mara din\'e1mica y mundos abiertos, los juegos en 3D requieren una arquitectura m\'e1s sofisticada, pero a su vez, ofrecen una jugabilidad m\'e1s rica y envolvente.\par
\par
\par
\cf1\fs28 b) Se han analizado los componentes de un motor de juegos. - la obviamos, est\'e1 respondida en el resto de preguntas\cf0\fs22\par
\par
\b\fs28 c) Se han analizado entornos de desarrollo de juegos. - Nuestro entorno es un editor y un navegador. que editor hemos usado? podr\'edamos haber usado otro? y otros? que navegador hemos usado? por que? podr\'edamos haber usado otros? has probado tu juego en otros navegadores?\b0\fs22\par
\par
\b\fs28 d) Se han analizado diferentes motores de juegos, sus caracter\'edsticas y funcionalidades - Diferencia entre el juego que hemos creado en 2D y el juego que hemos creado en 3D, indica en que se parecen y cuales son las diferencias. Hemos usado Threejs en lugar de programar 3D en crudo. Por que?\b0\fs22\par
Three.js es una biblioteca de JavaScript que facilita la creaci\'f3n y visualizaci\'f3n de gr\'e1ficos en 3D en el navegador utilizando WebGL. Se utiliza principalmente para crear experiencias gr\'e1ficas interactivas en 3D, desde visualizaciones de datos hasta videojuegos y simulaciones complejas. A continuaci\'f3n, te comento en qu\'e9 escenarios es recomendable utilizar Three.js:\par
\par
Cu\'e1ndo usar Three.js:\par
Gr\'e1ficos en 3D en el Navegador: Si necesitas crear una escena o aplicaci\'f3n 3D directamente en el navegador, Three.js es una excelente opci\'f3n. Es ideal cuando quieres evitar el trabajo m\'e1s bajo nivel que supone utilizar WebGL directamente.\par
\par
Animaciones y Simulaciones Interactivas: Cuando quieras agregar animaciones, simulaciones f\'edsicas o interactividad en un entorno 3D, como mover objetos en tiempo real, cambiar c\'e1maras, o responder a la interacci\'f3n del usuario (clics, movimientos de rat\'f3n, etc.).\par
\par
Visualizaciones Interactivas: Three.js es muy \'fatil para visualizar datos complejos en 3D. Esto puede incluir visualizaci\'f3n de datos cient\'edficos, diagramas, gr\'e1ficos en 3D, o incluso para recorridos arquitect\'f3nicos virtuales o modelos 3D interactivos.\par
\par
Juegos en 3D en el Navegador: Si est\'e1s creando un juego que necesita gr\'e1ficos 3D y quieres ejecutarlo en el navegador sin depender de un motor m\'e1s complejo como Unity o Unreal Engine, Three.js es una opci\'f3n sencilla y eficiente.\par
\par
Realidad Virtual (VR) y Realidad Aumentada (AR): Three.js ofrece soporte para VR y AR en el navegador a trav\'e9s de WebXR, lo que lo convierte en una excelente herramienta para crear experiencias inmersivas que pueden ejecutarse en dispositivos compatibles sin necesidad de instalar aplicaciones nativas.\par
\par
Proyectos Creativos en Arte y Dise\'f1o: Artistas digitales y dise\'f1adores usan Three.js para crear experiencias inmersivas y piezas art\'edsticas en 3D, gracias a su capacidad para manipular luces, sombras, texturas y geometr\'edas.\par
\par
Ejemplos de uso:\par
Simulaciones f\'edsicas: Como simulaciones de part\'edculas, sistemas planetarios o modelos de f\'edsica.\par
Arquitectura y modelado 3D: Renderizaci\'f3n de edificios, interiores o veh\'edculos interactivos que los usuarios pueden explorar.\par
Realidad aumentada y virtual: Crear experiencias inmersivas que combinen objetos reales y virtuales en el navegador.\par
Juegos: Juegos en 3D ligeros y r\'e1pidos que se ejecutan en navegadores web.\par
Visualizaciones de datos: Gr\'e1ficos de datos o representaciones en 3D que permiten a los usuarios explorar los datos desde diferentes perspectivas.\par
Cu\'e1ndo no usar Three.js:\par
Aplicaciones de gr\'e1ficos simples en 2D: Si solo necesitas gr\'e1ficos en 2D o animaciones sencillas, Three.js es excesivo. Herramientas como Canvas API o D3.js ser\'edan m\'e1s apropiadas.\par
\par
Proyectos pesados en 3D o juegos complejos: Para juegos o simulaciones 3D m\'e1s avanzados, con f\'edsicas complejas o un rendimiento extremadamente alto, es mejor usar un motor de videojuegos dedicado como Unity o Unreal Engine, que est\'e1n m\'e1s optimizados para ese tipo de proyectos.\par
\par
Aplicaciones m\'f3viles nativas: Aunque Three.js puede funcionar en dispositivos m\'f3viles, si est\'e1s desarrollando una aplicaci\'f3n m\'f3vil nativa que necesita gr\'e1ficos en 3D avanzados, podr\'edas obtener mejor rendimiento con soluciones nativas.\par
\par
En resumen, usa Three.js cuando necesites crear gr\'e1ficos o experiencias interactivas en 3D dentro de un navegador web, especialmente si tu proyecto requiere animaciones, simulaciones, o visualizaciones complejas en tiempo real.\par
\par
\b\fs28 e) Se han identificado los bloques funcionales de un juego existente - Condiciones iniciales, la funcion de inicio, hemos creado clases, hemos creado un bucle, hemos dibujado,\b0\fs22\par
Este c\'f3digo es una implementaci\'f3n b\'e1sica de un juego en 2D usando JavaScript y el elemento <canvas>. A continuaci\'f3n, te explico lo m\'e1s importante:\par
\par
Estructura del C\'f3digo:\par
HTML:\par
\par
Define tres elementos <canvas> para diferentes prop\'f3sitos: uno para las plataformas (lienzoplataformas), otro para los objetos del jugador y NPCs (lienzo1), y un tercero para otros elementos visuales (lienzo2).\par
Utiliza estilos CSS para ajustar la apariencia del canvas.\par
Im\'e1genes:\par
\par
Carga varias im\'e1genes (spritesheetbueno.png, malo.png, plataformas.png) que se utilizan para representar al jugador, a los NPCs y a las plataformas del juego.\par
Cuando la imagen de las plataformas se carga, se dibuja en el canvas de plataformas (lienzoplataformas).\par
Clases:\par
\par
Clase Jugador: Representa al personaje principal.\par
El jugador tiene coordenadas x e y, una velocidad en el eje y (vy), y tambi\'e9n en el eje x (vx), lo que permite movimiento horizontal.\par
El m\'e9todo dibuja() usa la imagen del jugador dependiendo de la direcci\'f3n en que est\'e1 mirando.\par
El m\'e9todo mueve() actualiza la posici\'f3n del jugador basado en la gravedad y las teclas presionadas.\par
El m\'e9todo colisionaPlataformas() detecta si el jugador est\'e1 en contacto con una plataforma y lo detiene si es necesario.\par
Clase Npc: Representa a los enemigos u objetos m\'f3viles del juego.\par
Los NPCs se mueven en funci\'f3n de un \'e1ngulo aleatorio y rebotan en los bordes del canvas.\par
El m\'e9todo mueve() actualiza su posici\'f3n, y rebota() ajusta el \'e1ngulo si colisionan con un borde.\par
Movimiento y Gravedad:\par
\par
El jugador est\'e1 afectado por una gravedad que incrementa su velocidad vertical (vy) mientras est\'e1 cayendo.\par
El movimiento se controla con las teclas del teclado:\par
ArrowLeft y ArrowRight mueven al jugador horizontalmente.\par
ArrowUp hace que el jugador salte.\par
ArrowDown lo mueve hacia abajo.\par
Detecci\'f3n de Colisiones:\par
\par
Usa la funci\'f3n getImageData() para obtener informaci\'f3n sobre los colores de un p\'edxel en el canvas y detectar si el jugador ha tocado algo (como una plataforma o un objeto que lo hace perder).\par
Si el jugador cae fuera del \'e1rea (m\'e1s all\'e1 de y > 512), el juego se reinicia.\par
Bucle de Juego:\par
\par
El juego corre en un bucle controlado por setTimeout, que actualiza y dibuja al jugador y los NPCs cada 30 milisegundos.\par
Funcionalidades Importantes:\par
Gravedad y movimiento horizontal: El jugador se ve afectado por la gravedad, y puede moverse horizontalmente en el aire, con saltos diagonales si se presiona una tecla de direcci\'f3n durante el salto.\par
Colisiones con plataformas: El jugador detecta las colisiones con las plataformas para dejar de caer y no atravesarlas.\par
Enemigos que rebotan: Los NPCs se mueven en \'e1ngulos aleatorios y rebotan cuando tocan los l\'edmites del canvas.\par
Detecci\'f3n de fin del juego: Si el jugador toca ciertas \'e1reas o cae demasiado, el juego se reinicia.\par
Este c\'f3digo representa un punto de partida para un juego 2D simple con controles de movimiento, colisiones b\'e1sicas y enemigos que se mueven de manera aut\'f3noma.\par
\b\fs28 f) Se ha reconocido la representaci\'f3n l\'f3gica y espacial de una escena gr\'e1fica sobre un juego existente - Indica la diferencia entre la parte de gestion logica, y la parte de pintura en el canvas del juego que hemos desarrollado\b0\par
\fs22 1. Gesti\'f3n L\'f3gica\par
Definici\'f3n:\par
La gesti\'f3n l\'f3gica se refiere a la parte del c\'f3digo que se encarga de la l\'f3gica del juego, que incluye la interacci\'f3n de los objetos, las reglas del juego, la actualizaci\'f3n del estado de los objetos y la detecci\'f3n de colisiones. En esta parte, se define c\'f3mo se comportan los elementos del juego y c\'f3mo interact\'faan entre s\'ed.\par
\par
Caracter\'edsticas:\par
\par
Estado del juego: Maneja la informaci\'f3n sobre el estado actual del juego, como la posici\'f3n de los personajes, la velocidad, y cualquier otro atributo relevante.\par
F\'edsica y Movimiento: Calcula la f\'edsica del juego, como la gravedad, el movimiento de los personajes, y las colisiones con otros objetos (por ejemplo, las plataformas en el juego).\par
Interacciones: Define c\'f3mo responden los personajes y NPCs (personajes no jugables) a las acciones del jugador (por ejemplo, saltar, moverse, o interactuar con otros objetos).\par
Eventos: Maneja eventos como la p\'e9rdida de vida, la puntuaci\'f3n, o el final del juego.\par
No visual: No se ocupa de la representaci\'f3n visual de los objetos; en su lugar, se centra en las reglas y la l\'f3gica que determinan el comportamiento del juego.\par
Ejemplo en el c\'f3digo:\par
\par
javascript\par
Copiar c\'f3digo\par
// M\'e9todo que gestiona el movimiento del jugador\par
mueve() \{\par
  if (this.cayendo) \{\par
    this.vy += gravedad;  // Aplicar gravedad\par
    this.y += this.vy;    // Actualizar posici\'f3n vertical\par
    this.x += this.vx;    // Aplicar movimiento horizontal\par
  \}\par
  this.colisionaPlataformas(); // Verificar colisiones con plataformas\par
\}\par
2. Pintura en el Canvas\par
Definici\'f3n:\par
La pintura en el canvas se refiere a la representaci\'f3n visual de los objetos en la pantalla. Esta parte del c\'f3digo se encarga de dibujar todos los elementos gr\'e1ficos del juego, como personajes, fondos y elementos de interfaz.\par
\par
Caracter\'edsticas:\par
\par
Renderizado: Se encarga de dibujar los objetos en el lienzo (canvas) utilizando funciones de dibujo, como drawImage() para im\'e1genes o fillRect() para figuras geom\'e9tricas.\par
Actualizaci\'f3n Visual: Redibuja el estado visual de la escena en cada fotograma. Esto puede incluir la actualizaci\'f3n de posiciones, animaciones, y efectos visuales.\par
Dibujo de Escena: Establece c\'f3mo se ver\'e1n los elementos del juego en la pantalla, aplicando texturas, colores y efectos de iluminaci\'f3n.\par
Interfaz de Usuario: Maneja la representaci\'f3n de elementos de la interfaz de usuario, como men\'fas, puntuaciones, o indicadores de vida.\par
Ejemplo en el c\'f3digo:\par
\par
javascript\par
Copiar c\'f3digo\par
// M\'e9todo que dibuja al jugador en el canvas\par
dibuja() \{\par
  if (this.direccion == "izquierda") \{\par
    contexto.drawImage(imagenbueno, 0, 0, 35, 35, this.x, this.y, 35, 35); // Dibuja el jugador hacia la izquierda\par
  \} else \{\par
    contexto.drawImage(imagenbueno, 35, 0, 35, 35, this.x, this.y, 35, 35); // Dibuja el jugador hacia la derecha\par
  \}\par
\}\par
Resumen de Diferencias\par
Gesti\'f3n L\'f3gica: Se ocupa de c\'f3mo funcionan los elementos del juego y de las reglas que rigen la interacci\'f3n. Es m\'e1s sobre el "qu\'e9" y el "c\'f3mo" del comportamiento de los objetos.\par
\par
Pintura en el Canvas: Se centra en c\'f3mo se ven los elementos del juego en la pantalla. Se encarga del "c\'f3mo" se representa visualmente el estado del juego.\par
\par
Ambas partes son fundamentales para el desarrollo de un juego, ya que la gesti\'f3n l\'f3gica determina la jugabilidad y la experiencia del jugador, mientras que la pintura en el canvas crea la representaci\'f3n visual que permite al jugador interactuar con el mundo del juego.\par
\par
\par
\par
\par
Entrega: Domingo 13 de octubre\par
\par
C\'f3mo se entrega:\par
\par
Graba un video en el cual utilices 5 minutos por cada uno de de los criterios de evaluaci\'f3n indicados m\'e1s arriba.\par
En total el video debe ocupar unos 25 minutos.\par
Recomendable hacer una carilla por cada uno de los criterios de evaluacion.\par
Importante que al final TODO lo que hab\'e9is hecho quede correctamente explicado si no en un punto, en otro.\par
No hay por qu\'e9 grabar el video de un tir\'f3n - graba trozos de 5 minutos, y luego lo montas en edicion de video.\par
IMPORTANTE: El juego entregado (a partir sobre todo del juego 2d) debe partir de mi codigo e implementar todo lo que yo implemento, PERO debe introducir mejoras y ampliaciones, tanto est\'e9ticas, como sobre todo funcionales.\par
El repositorio puede estar publico o privado, puede ser una carpeta dentro de un repositorio\par
\par
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\par
\par
\fs32 2. Desarrolla juegos 2D y 3D sencillos utilizando motores de juegos.\par
\fs22\par
Criterios de evaluaci\'f3n:\par
\par
a) Se ha establecido la l\'f3gica de un nuevo juego.\par
\par
Explica la diferencia y las similitudes de la l\'f3gica entre los juegos 2D y 3D (3d con threejs)\par
Three.js es una  biblioteca JavaScript que permite crear gr\'e1ficos en 3D y experiencias interactivas directamente en el navegador y manipular elementos.\par
En primer lugar agregaremos este <script> en tu archivo HTML.  \par
    <script src="{{\field{\*\fldinst{HYPERLINK https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js }}{\fldrslt{https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\ul0\cf0}}}}\f0\fs22 "></script>\par
Crearemos una escena con c\'e1mara , un objeto y  un renderizador . Tambi\'e9n posicionaremos la c\'e1mara en algun punto en concreto , podremos generar una animaci\'f3n etc....\par
Podremos hacer muchas mas cosas como a\'f1adir luz , diferentes texturas , podremos mover la camara con controles de movimiento etc... \par
\par
b) Se han creado los objetos necesarios para el juego y definido sus caracter\'edsticas.\par
\par
En el juego 3D, comenta c\'f3mo crearmos objetos a partir de Three.mesh y Three.object\par
En Three.js, los objetos tridimensionales se crean combinando geometr\'edas y materiales con la clase THREE.Mesh. Adem\'e1s, para organizar y agrupar m\'faltiples objetos, se puede usar la clase THREE.Object3D. \par
\par
c) Se han creado las escenas del juego y distribuido los objetos en las mismas.\par
\par
En el juego, comenta que, para que todo funcione, tiene que existir un objeto raiz llamada Three.scene, dentro del cual estar\'e1n enmarcados el resto de objetos\par
\par
d) Se han creado materiales para determinar las propiedades finales de la superficie de un objeto.\par
\par
Cuando creamos objetos, les asignamos un  material. De hecho usamos dos tipos de materiales. Comenta las caracter\'edsticas b\'e1sicas de estos materiales, tal y como hemos visto en clase\par
\par
e) Se han establecido las propiedades f\'edsicas de los objetos.\par
\par
A lo largo del desarrollo de juegos 2D y 3D, hemos visto la simulacion de eventos f\'edsicos tales como la colisi\'f3n o la gravedad. Comenta c\'f3mo hemos logrado tales efectos\par
\par
\par
g) Se han utilizado c\'e1maras y configurado la iluminaci\'f3n.\par
\par
En los juegos 2D comenta como hicimos el efecto de desfase parallax, y en el juego 3D comenta que tuvimos que poner una c\'e1mara 3D para establecer el punto de vista del propio juego 3D\par
\par
i) Se han realizado pruebas de funcionamiento y optimizaci\'f3n de los juegos desarrollados.\par
\par
Cuando hemos desarrollado juegos, hemos tendo la consola abierta, para ver elementos tales como el consumo de CPU, el consumo de RAM, debugear, etc. Comenta todas estas operaciones realizadas\par
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\par
\fs32 3. Aplica tecnolog\'edas de desarrollo para dispositivos m\'f3viles evaluando sus caracter\'edsticas y capacidades.\par
\par
Criterios de evaluaci\'f3n:\par
\fs22\par
a) Se han analizado las limitaciones que plantea la ejecuci\'f3n de aplicaciones en los dispositivos m\'f3viles.\par
\par
Cuando desarrollamos aplicaciones para dispositivos m\'f3viles debemos tener en cuenta que entramos en un ecosistema un poco particular ya que por una parte estamos obligados a desarrollar estas aplicaciones utilizando un entorno de desarrollo oficial de Android y por otra parte debemos tener en cuenta que un dispositivo m\'f3vil es un sistema inform\'e1tico con una serie de caracter\'edsticas muy definidas as\'ed que de lo que se trata es de que coment\'e9is cu\'e1les son las diferencias entre un sistema inform\'e1tico de sobremesa por ejemplo una torre o un port\'e1til con respecto a las caracter\'edsticas que presenta un dispositivo m\'f3vil\par
\par
b) Se han identificado las tecnolog\'edas de desarrollo de aplicaciones para dispositivos m\'f3viles.\par
\par
Llegado a este punto deb\'e9is identificar cuales son las dos principales tecnolog\'edas de desarrollo donde en este caso por una parte tenemos desarrollo para Android y por otra parte desarrollo para iOS pero debido a que el desarrollo para sistemas Apple constituye una plataforma un poco cerrada desde el punto de vista en que s\'f3lo se pueden desarrollar aplicaciones para Apple en ordenadores de esa marca nosotros estamos obligados a \'fanicamente a desarrollar aplicaciones para Android a\'fan siendo conscientes de que existe otro ecosistema que es el ecosistema de Apple y luego aparte tambi\'e9n lo que quiero es que me mostr\'e9is los ejemplos que hemos hecho en clase y que ve hab\'e9is desarrollado y ampliado vosotros con respecto a las dos tecnolog\'edas principales con las cuales hemos desarrollado aplicaciones donde la primera de ellas es el desarrollo de aplicaciones nativas con XML y cotlin y la segunda de las metodolog\'edas que hemos utilizado es el desarrollo de aplicaciones embebidas utilizando tecnolog\'edas web\par
\par
c) Se han instalado, configurado y utilizado entornos de trabajo para el desarrollo de aplicaciones para dispositivos m\'f3viles.\par
\par
En clase hemos instalado el entorno de desarrollo oficial para Android de Google que es el Android de estudio por una parte se trata de que indiqu\'e9is de d\'f3nde lo hab\'e9is sacado como lo hab\'e9is instalado como lo ejecut\'e1is como lo ejecut\'e1is y que me de dig\'e1is Por una parte del entorno de desarrollo y por otra parte de un proyecto cualquiera de Android por supuesto para esto lo que ten\'e9is que hacer es mostrarme estas configuraciones abriendo y mostrando los proyectos personalizados que hab\'e9is hecho de aplicaciones m\'f3viles\par
\par
\cf1 d) Se han identificado configuraciones que clasifican los dispositivos m\'f3viles en base a sus caracter\'edsticas.\par
\par
e) Se han descrito perfiles que establecen la relaci\'f3n entre el dispositivo y la aplicaci\'f3n.\par
\cf0\par
f) Se ha analizado la estructura de aplicaciones existentes para dispositivos m\'f3viles identificando las clases utilizadas.\par
\par
Una vez que llegamos a este punto se supone que ten\'e9is que desarrollar una aplicaci\'f3n m\'f3vil que se integre de alguna forma con el resto de aplicaciones que est\'e9s desarrollando especialmente ser\'eda extra positivo que realizar\'e9is alguna integraci\'f3n de la aplicaci\'f3n m\'f3vil con respecto a la aplicaci\'f3n de gesti\'f3n empresarial que se est\'e1 desarrollando en la asignatura correspondiente as\'ed que de lo que se trata es de que expliqu\'e9is como hab\'e9is creado un nuevo proyecto y de qu\'e9 forma hab\'e9is comunicado la aplicaci\'f3n m\'f3vil para mostrar y para compartir algo de informaci\'f3n de la aplicaci\'f3n Crimson y de la adaptaci\'f3n que est\'e1is haciendo con respecto a esa aplicaci\'f3n por ejemplo yo en clase hice una sub adaptaci\'f3n llamada Crimson cars pues de lo que se trata es de que hag\'e1is algo parecido pero aplicado cada uno a vuestro proyecto\par
\par
g) Se han realizado modificaciones sobre aplicaciones existentes.\par
\par
De la misma forma que en el apartado anterior de lo que se trata en este apartado es de que especifiqu\'e9is c\'f3mo vais a realizar esa implementaci\'f3n y esa adaptaci\'f3n de las aplicaciones m\'f3viles que est\'e1is desarrollando para el proyecto concreto que est\'e1is trabajando dentro de las naturales sistemas de gesti\'f3n empresarial es decir se trata de que por una parte demostr\'e9is que pod\'e9is crear aplicaciones desde cero pero tambi\'e9n sobre todo que mediante peticiones a trav\'e9s de la red pod\'e9is comunicaros con otras aplicaciones de sistemas de gesti\'f3n empresarial y pod\'e9is tanto recibir como enviar informaci\'f3n a estos sistemas\par
\par
h) Se han utilizado emuladores para comprobar el funcionamiento de las aplicaciones.\par
\par
Inevitablemente cuando trabajamos sobre una aplicaci\'f3n m\'f3vil en lugar de lanzar la aplicaci\'f3n directamente a un terminal f\'edsico lo que hacemos es trabajar con las m\'e1quinas virtuales que est\'e1n integradas dentro del entorno de desarrollo de Android de estudio as\'ed que en este apartado se trata de que indiqu\'e9is cu\'e1les son las caracter\'edsticas de una m\'e1quina virtual como se crea una m\'e1quina virtual nueva como se configura y c\'f3mo podemos medir los recursos que se le otorgan a esa m\'e1quina virtual para que incluso en un momento dado podamos crear diferentes m\'e1quinas virtuales con el objetivo de probar el programa que estamos desarrollando en diferentes tipos de dispositivos m\'f3viles\par
\par
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\par
\fs32 4. Desarrolla aplicaciones para dispositivos m\'f3viles analizando y empleando las tecnolog\'edas y librer\'edas espec\'edficas.\par
\par
Criterios de evaluaci\'f3n:\par
\fs22\par
a) Se ha generado la estructura de clases necesaria para la aplicaci\'f3n.\par
\par
b) Se han analizado y utilizado las clases que modelan ventanas, men\'fas, alertas y controles para el desarrollo de aplicaciones gr\'e1ficas sencillas.\par
\par
c) Se han utilizado las clases necesarias para la conexi\'f3n y comunicaci\'f3n con dispositivos inal\'e1mbricos.\par
\par
d) Se han desarrollado aplicaciones que hacen uso de las funcionalidades proporcionadas por los sensores.\par
\par
e) Se han utilizado las clases necesarias para establecer conexiones y comunicaciones HTTP y HTTPS.\par
\par
f) Se han utilizado las clases necesarias para establecer conexiones con almacenes de datos garantizando la persistencia.\par
\par
g) Se han realizado pruebas de interacci\'f3n usuario-aplicacio\u769?n para optimizar las aplicaciones desarrolladas a partir de emuladores.\par
\par
h) Se han empaquetado y desplegado las aplicaciones desarrolladas en dispositivos m\'f3viles reales.\par
\par
i) Se han documentado los procesos necesarios para el desarrollo de las aplicaciones.\par
\par
j) Se han establecido los permisos requeridos para el funcionamiento de las aplicaciones.\par
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\par
\fs32 5. Desarrolla programas que integran contenidos multimedia analizando y empleando las tecnolog\'edas y librer\'edas espec\'edficas.\par
\par
Criterios de evaluaci\'f3n:\par
\fs22\par
a) Se han analizado entornos de desarrollo multimedia.\par
\par
En esta unidad hemos estado trabajando con capacidades avanzadas en cuanto al tratamiento del v\'eddeo y del audio entre otras cosas as\'ed que el objetivo es que realic\'e9is un resumen y cont\'e9is qu\'e9 es lo que hemos dado trabajando y que es lo que hab\'e9is aprendido a trav\'e9s de los ejercicios que hab\'e9is desarrollado en cuanto a la gesti\'f3n de recursos multimedia es decir de recursos audiovisuales a partir de los ejercicios de c\'f3digo que hemos realizado\par
\par
b) Se han reconocido las clases que permiten la captura, procesamiento y almacenamiento de datos multimedia.\par
\par
En los ejercicios que hemos desarrollado hemos creado tanto clases que trabajan con v\'eddeo como clases que trabajan con audio de la misma forma que hemos aprendido a capturar la c\'e1mara y a capturar la pantalla para ello hemos utilizado no ya tanto clases creadas por nosotros mismos sino clases que realmente ya exist\'edan de forma previa as\'ed que el objetivo es que me dig\'e1is lo que hemos aprendido acerca de esas clases obviamente no lo sabemos todo acerca de esas clases pero s\'ed que me dig\'e1is qu\'e9 m\'e9todos y qu\'e9 propiedades hemos utilizado\par
\par
\cf1 c) Se han utilizado clases para la conversi\'f3n de datos multimedia de un formato a otro.\par
\cf0\par
d) Se han utilizado clases para procesar datos multimedia\par
\par
De la misma forma que hemos utilizado clases para capturar datos tambi\'e9n hemos utilizado clases o en definitiva m\'e9todos para editar la informaci\'f3n capturada y para poder transformarla o representarla por ejemplo en el caso del v\'eddeo hemos ido capaces de acceder a los p\'edxeles y en el caso del audio hemos sido capaces de acceder a cada una de las muestras que aparecen delante de nuestros o\'eddos vale por tanto el objetivo es que indiqu\'e9is qu\'e9 tipo de c\'f3digo o qu\'e9 tipo de clase o qu\'e9 tipo de estructuras de control hemos utilizado para poder acceder a esos datos.\par
\par
e) Se han utilizado clases para el control de eventos, tipos de media y excepciones, entre otros.\par
\par
Cuando hemos utilizado elementos tales como el audio hemos visto que existen m\'e9todos tales como por ejemplo cuando el v\'eddeo empieza cuando el v\'eddeo acaba cuando el v\'eddeo pausa etc as\'ed que la idea es que indiqu\'e9is qu\'e9 eventos espec\'edficos hemos encontrado en el v\'eddeo en el audio etc\'e9tera\par
\par
f) Se han utilizado clases para la creaci\'f3n y control de animaciones.\par
\par
g) Se han utilizado clases para reproducir contenidos multimedia.\par
\par
De la misma forma que un punto anterior pues se trata de que me indiqueis qu\'e9 clases podemos utilizar para reproducir tanto v\'eddeo como audio como captura de pantalla\par
\par
h) Se han depurado y \cf1 documentado \cf0 los programas desarrollados.\par
\par
All\'ed s\'ed que es interesante que me habl\'e9is un poco acerca de qu\'e9 es lo que hac\'e9is cuando aparece alg\'fan error en el programa es decir qu\'e9 operaciones de depuraci\'f3n mediante consola lanzando matrices por consola eh realiz\'e1is cuando un programa viene a dar alg\'fan tipo de error\par
\par
\par
\par
}
 